class_name LevelData
extends Resource

signal level_completed

## True if currently the active level
@export var is_active := false :
	set(new_value):
		is_active = new_value
		if ref and not level_id == 0:
			if new_value == true:
				Global.level_container.add_child(ref)
			else:
				Global.level_container.remove_child.call_deferred(ref)

## Index in the Global Arena Array
@export var level_id: int
## Displayed name of the level
@export var level_name: String
## True if the level has the unlocked by something
@export var is_locked := false
## Current completion state of the level
@export var is_completed := false
## True if the level has been completed in the past TODO: Add save system ?!
@export var has_been_completed := false
## List of levels that are unlocked by completing this one
@export var unlocks: Array[LevelData] = []
## Amount of flashes allowed in this level 
@export var flash_limit := 5
@export var flash_limit_active := true

## Reference of the instanced level
var ref: LevelBase
## Global start transform of the level, it is set by the StartPoint Node3D inside each level scene.
var start_transform: Transform3D
## The Transform of the level on the main scene.
## Get's stored here in main ready.
var main_transform: Transform3D
## Is generated by the child count of the levels Enemies Node
var enemy_count: int
## The current count of flashed enemies
var enemies_flashed_count: int : 
	set(new_value):
		enemies_flashed_count = new_value
		
		if enemies_flashed_count >= enemy_count:
			is_completed = true
			has_been_completed = true
			handle_unlocks()
			level_completed.emit()
			print("LevelData: Level Completed!")
		
		if enemies_flashed_count > enemies_flashed_count_best:
			enemies_flashed_count_best = enemies_flashed_count
		

## The "high score" of the level
var enemies_flashed_count_best: int


func handle_unlocks() -> void:
	for unlock in unlocks:
		unlock.is_locked = false
